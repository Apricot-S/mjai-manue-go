package ai

import (
	"fmt"
	"testing"
)

func Test_getPoints(t *testing.T) {
	type args struct {
		fu  int
		fan int
		oya bool
	}

	koPointTable := map[int]map[int]int{
		20:  {2: 1300, 3: 2600, 4: 5200, 5: 8000, 6: 12000, 7: 12000, 8: 16000, 9: 16000, 10: 16000, 11: 24000, 12: 24000, 13: 32000, 14: 32000},
		25:  {2: 1600, 3: 3200, 4: 6400, 5: 8000, 6: 12000, 7: 12000, 8: 16000, 9: 16000, 10: 16000, 11: 24000, 12: 24000, 13: 32000, 14: 32000},
		30:  {1: 1000, 2: 2000, 3: 3900, 4: 7700, 5: 8000, 6: 12000, 7: 12000, 8: 16000, 9: 16000, 10: 16000, 11: 24000, 12: 24000, 13: 32000, 14: 32000},
		40:  {1: 1300, 2: 2600, 3: 5200, 4: 8000, 5: 8000, 6: 12000, 7: 12000, 8: 16000, 9: 16000, 10: 16000, 11: 24000, 12: 24000, 13: 32000, 14: 32000},
		50:  {1: 1600, 2: 3200, 3: 6400, 4: 8000, 5: 8000, 6: 12000, 7: 12000, 8: 16000, 9: 16000, 10: 16000, 11: 24000, 12: 24000, 13: 32000, 14: 32000},
		60:  {1: 2000, 2: 3900, 3: 7700, 4: 8000, 5: 8000, 6: 12000, 7: 12000, 8: 16000, 9: 16000, 10: 16000, 11: 24000, 12: 24000, 13: 32000, 14: 32000},
		70:  {1: 2300, 2: 4500, 3: 8000, 4: 8000, 5: 8000, 6: 12000, 7: 12000, 8: 16000, 9: 16000, 10: 16000, 11: 24000, 12: 24000, 13: 32000, 14: 32000},
		80:  {1: 2600, 2: 5200, 3: 8000, 4: 8000, 5: 8000, 6: 12000, 7: 12000, 8: 16000, 9: 16000, 10: 16000, 11: 24000, 12: 24000, 13: 32000, 14: 32000},
		90:  {1: 2900, 2: 5800, 3: 8000, 4: 8000, 5: 8000, 6: 12000, 7: 12000, 8: 16000, 9: 16000, 10: 16000, 11: 24000, 12: 24000, 13: 32000, 14: 32000},
		100: {1: 3200, 2: 6400, 3: 8000, 4: 8000, 5: 8000, 6: 12000, 7: 12000, 8: 16000, 9: 16000, 10: 16000, 11: 24000, 12: 24000, 13: 32000, 14: 32000},
		110: {1: 3600, 2: 7100, 3: 8000, 4: 8000, 5: 8000, 6: 12000, 7: 12000, 8: 16000, 9: 16000, 10: 16000, 11: 24000, 12: 24000, 13: 32000, 14: 32000},
	}
	oyaPointTable := map[int]map[int]int{
		20:  {2: 2000, 3: 3900, 4: 7700, 5: 12000, 6: 18000, 7: 18000, 8: 24000, 9: 24000, 10: 24000, 11: 36000, 12: 36000, 13: 48000, 14: 48000},
		25:  {2: 2400, 3: 4800, 4: 9600, 5: 12000, 6: 18000, 7: 18000, 8: 24000, 9: 24000, 10: 24000, 11: 36000, 12: 36000, 13: 48000, 14: 48000},
		30:  {1: 1500, 2: 2900, 3: 5800, 4: 11600, 5: 12000, 6: 18000, 7: 18000, 8: 24000, 9: 24000, 10: 24000, 11: 36000, 12: 36000, 13: 48000, 14: 48000},
		40:  {1: 2000, 2: 3900, 3: 7700, 4: 12000, 5: 12000, 6: 18000, 7: 18000, 8: 24000, 9: 24000, 10: 24000, 11: 36000, 12: 36000, 13: 48000, 14: 48000},
		50:  {1: 2400, 2: 4800, 3: 9600, 4: 12000, 5: 12000, 6: 18000, 7: 18000, 8: 24000, 9: 24000, 10: 24000, 11: 36000, 12: 36000, 13: 48000, 14: 48000},
		60:  {1: 2900, 2: 5800, 3: 11600, 4: 12000, 5: 12000, 6: 18000, 7: 18000, 8: 24000, 9: 24000, 10: 24000, 11: 36000, 12: 36000, 13: 48000, 14: 48000},
		70:  {1: 3400, 2: 6800, 3: 12000, 4: 12000, 5: 12000, 6: 18000, 7: 18000, 8: 24000, 9: 24000, 10: 24000, 11: 36000, 12: 36000, 13: 48000, 14: 48000},
		80:  {1: 3900, 2: 7700, 3: 12000, 4: 12000, 5: 12000, 6: 18000, 7: 18000, 8: 24000, 9: 24000, 10: 24000, 11: 36000, 12: 36000, 13: 48000, 14: 48000},
		90:  {1: 4400, 2: 8700, 3: 12000, 4: 12000, 5: 12000, 6: 18000, 7: 18000, 8: 24000, 9: 24000, 10: 24000, 11: 36000, 12: 36000, 13: 48000, 14: 48000},
		100: {1: 4800, 2: 9600, 3: 12000, 4: 12000, 5: 12000, 6: 18000, 7: 18000, 8: 24000, 9: 24000, 10: 24000, 11: 36000, 12: 36000, 13: 48000, 14: 48000},
		110: {1: 5300, 2: 10600, 3: 12000, 4: 12000, 5: 12000, 6: 18000, 7: 18000, 8: 24000, 9: 24000, 10: 24000, 11: 36000, 12: 36000, 13: 48000, 14: 48000},
	}
	fus := []int{20, 25, 30, 40, 50, 60, 70, 80, 90, 100, 110}
	fans := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
	oyas := []bool{false, true}

	var tests []struct {
		name string
		args args
		want int
	}

	for _, fu := range fus {
		for _, fan := range fans {
			for _, oya := range oyas {
				var want int
				var ok bool
				if oya {
					want, ok = oyaPointTable[fu][fan]
				} else {
					want, ok = koPointTable[fu][fan]
				}
				if !ok {
					continue
				}
				role := "ko"
				if oya {
					role = "oya"
				}
				tests = append(tests, struct {
					name string
					args args
					want int
				}{
					name: fmt.Sprintf("%s %d fu %d fan", role, fu, fan),
					args: args{fu: fu, fan: fan, oya: oya},
					want: want,
				})
			}
		}
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := getPoints(tt.args.fu, tt.args.fan, tt.args.oya); got != tt.want {
				t.Errorf("getPoints() = %v, want %v", got, tt.want)
			}
		})
	}
}
